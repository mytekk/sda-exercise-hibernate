<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
<class name="pl.sda.exercise.hibernate.model.Book" table="book">
	<id name="id" type="java.lang.Integer">
		<column name="id" />
		<generator class="native" />
	</id>
	<property name="title" type="java.lang.String">
		<column name="title" />
	</property>
	<!-- mapowanie relacji miedzy ksiazka a autorem -->
	<!-- jest to relacja wiele do jeden, bo wiele ksiazek moze miec tego samego autrora -->
	<!-- lazy="false" - pobierajac ksiazki pobierze rowniez autorow ksiazki -->
	 <!-- trzeba to zrobic, bo przez leniwe ladowanie hibernate tego domyslnie nie zrobi -->
	<!-- i wtedy cwiczenie 8 nie zadziala, bo odwolujemy sie tam do funkcji getBooks -->
	<!-- ktora pobierze tylko info o ksiazkach bez autorow, a w pliku 08 chcemy wypisac tez -->
	<!-- autora, ktory przez getBook nie zostal pobrany - wlasnie przez to leniwe ladowanie -->
	<!-- hibernate sprobuje pobrac autora dopiero wtedy kiedy jest on potrzebny, czyli przy -->
	<!-- wyswietlaniu, a wtedy metoda bet\books ma juz zamknieta sesje i nie bedzie mogla tego pobrac -->
	<!-- tak dziala leniwe ladowanie, ktore tutaj wylaczamy - dzieki temu hibernate pobierze -->
	<!-- info o autorze od razu przy pobieraniu ksiazki -->
	<many-to-one name="author" class="pl.sda.exercise.hibernate.model.Author" column="author_id"
				 lazy="false" cascade="save-update"></many-to-one>

	<!-- mapowanie relacji wiele-do-wielu czyli ksiazka - kategorie -->
	<set name="categories" table="book_category" lazy="false"> <!-- podajemy tabelkeposredniczaca -->
		<key column="book_id"></key> <!-- kolumna z tabeli book_category, ktora jest powizana z bookiem -->
		<many-to-many column="category_id" class="pl.sda.exercise.hibernate.model.Category"></many-to-many> <!-- kolumna z tabeli book_category, ktora jest powizana z kategoria -->
	</set>
</class>
</hibernate-mapping>
